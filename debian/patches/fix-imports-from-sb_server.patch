Description: fix import erros in smtpproxy
 smtpproxy tries to imports classes and functions from sb_server. This
 is not possible because sb_server is installed as a script.
 .
 This patches copies code from sb_server to smtpproxy in order to
 avoid these imports. In the future we should rather put these objects
 in a common library file.
Author: Hugo Lefeuvre <hle@debian.org>
Forwarded: not-needed
--- a/spambayes/smtpproxy.py	2019-02-01 09:00:08.731689852 +0100
+++ b/spambayes/smtpproxy.py	2019-02-01 09:28:39.009541096 +0100
@@ -122,8 +122,129 @@
 from spambayes.tokenizer import textparts
 from spambayes.tokenizer import try_to_repair_damaged_base64
 from spambayes.Options import options
-from sb_server import _addressPortStr, ServerLineReader
-from sb_server import _addressAndPort
+
+# FIXME: stolen from sb_server
+class ServerLineReader(Dibbler.BrighterAsyncChat):
+    """An async socket that reads lines from a remote server and
+    simply calls a callback with the data.  The BayesProxy object
+    can't connect to the real POP3 server and talk to it
+    synchronously, because that would block the process."""
+
+    def __init__(self, serverName, serverPort, lineCallback, ssl=False,
+                 map=None):
+        Dibbler.BrighterAsyncChat.__init__(self, map=map)
+        self.lineCallback = lineCallback
+        self.handled_exception = False
+        self.request = ''
+        self.set_terminator('\r\n')
+        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
+        # create_socket creates a non-blocking socket.  This is not great,
+        # because then socket.connect() will return errno 10035, because
+        # connect takes time.  We then don't know if the connect call
+        # succeeded or not.  With Python 2.4, this means that we will move
+        # into asyncore.loop(), and if the connect does fail, have a
+        # loop something like 'while True: log(error)', which fills up
+        # stdout very fast.  Non-blocking is also a problem for ssl sockets.
+        self.socket.setblocking(1)
+        try:
+            self.connect((serverName, serverPort))
+        except socket.error, e:
+            error = "Can't connect to %s:%d: %s" % (serverName, serverPort, e)
+            # Some people have their system setup to check mail very
+            # frequently, but without being clever enough to check whether
+            # the network is available.  If we continually print the
+            # "can't connect" error, we use up lots of CPU and disk space.
+            # To avoid this, if not verbose only print each distinct error
+            # once per hour.
+            # See also: [ 1113863 ] sb_tray eats all cpu time
+            now = time.time()
+            then = time.time() - 3600
+            if error not in state.reported_errors or \
+               options["globals", "verbose"] or \
+               state.reported_errors[error] < then:
+                print >>sys.stderr, error
+
+                # Record this error in the list of ones we have seen this
+                # session.
+                state.reported_errors[error] = now
+
+            self.lineCallback('-ERR %s\r\n' % error)
+            self.lineCallback('')   # "The socket's been closed."
+            self.close()
+        else:
+            if ssl:
+                try:
+                    self.ssl_socket = socket.ssl(self.socket)
+                except socket.sslerror, why:
+                    if why[0] == 1: # error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol'
+                        # Probably not SSL after all.
+                        print >> sys.stderr, "Can't use SSL"
+                    else:
+                        raise
+                else:
+                    self.send = self.send_ssl
+                    self.recv = self.recv_ssl
+            self.socket.setblocking(0)
+
+    def send_ssl(self, data):
+        return self.ssl_socket.write(data)
+
+    def handle_expt(self):
+        # Python 2.4's system of continuously pumping error messages
+        # is stupid.  Print an error once, and then ignore.
+        if not self.handled_exception:
+            print >> sys.stderr, "Unhandled exception in ServerLineReader"
+            self.handled_exception = True
+
+    def recv_ssl(self, buffer_size):
+        try:
+            data = self.ssl_socket.read(buffer_size)
+            if not data:
+                # a closed connection is indicated by signaling
+                # a read condition, and having recv() return 0.
+                self.handle_close()
+                return ''
+            else:
+                return data
+        except socket.sslerror, why:
+            if why[0] == 6: # 'TLS/SSL connection has been closed'
+                self.handle_close()
+                return ''
+            elif why[0] == 2: # 'The operation did not complete (read)'
+                return ''
+            else:
+                raise
+
+    def collect_incoming_data(self, data):
+        self.request = self.request + data
+
+    def found_terminator(self):
+        self.lineCallback(self.request + '\r\n')
+        self.request = ''
+
+    def handle_close(self):
+        self.lineCallback('')
+        self.close()
+        try:
+            del self.ssl_socket
+        except AttributeError:
+            pass
+
+def _addressAndPort(s):
+    """Decode a string representing a port to bind to, with optional address."""
+    s = s.strip()
+    if ':' in s:
+        addr, port = s.split(':')
+        return addr, int(port)
+    else:
+        return '', int(s)
+
+def _addressPortStr((addr, port)):
+    """Encode a string representing a port to bind to, with optional address."""
+    if not addr:
+        return str(port)
+    else:
+        return '%s:%d' % (addr, port)
 
 class SMTPProxyBase(Dibbler.BrighterAsyncChat):
     """An async dispatcher that understands SMTP and proxies to a SMTP
